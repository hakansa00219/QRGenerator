name: QR CI
on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
jobs: 
    tests:
        name: Unity Tests
        runs-on: ubuntu-latest

        steps:

        # Make sure gtk libraries updated
        - name: Install GTK libraries
          run: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-0 libnss3
            
        # Checkout
        - uses: actions/checkout@v4

        # Batch mode and no graphics setting
        - name: Setup Unity Environment
          run: |
            sudo mkdir -p /root/.cache/unity3d
            sudo chmod -R 777 /root/.cache/unity3d
            export UNITY_BATCH_MODE=true
            export UNITY_NO_GRAPHICS=true
            
        # Arial font
        - name: Install Arial Font
          run: |
            sudo apt-get update
            sudo apt-get install -y ttf-mscorefonts-installer

        # Permissions
        - name: Fix Cache Directory Permissions
          run: |
            sudo mkdir -p /root/.cache/unity3d
            sudo chmod -R 777 /root/.cache/unity3d
            
        # Cache
        - uses: actions/cache@v3
          with:
            path: Library
            key: Library-${{ vars.PROJECT_NAME }}-WebGL
            restore-keys: |
                Library-${{ vars.PROJECT_NAME }}-
                Library-  
                
        # Tests
        - uses: game-ci/unity-test-runner@v4
          id: TestRunner
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            projectPath: .
            githubToken: ${{ secrets.GITHUB_TOKEN }}
            unityVersion: 6000.0.22f1
            
        # Test Results
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Test results
            path: ${{ steps.TestRunner.outputs.artifactsPath }} 
            
        # Code Coverage
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Coverage results
            path: ${{ steps.TestRunner.outputs.coveragePath }}
            
        # Show Diff
        - name: Show git diff
          run: git diff
          
    build:
        name: Build for WebGL
        runs-on: ubuntu-latest
        needs: tests
        if: success()

        steps:
        
        # Checkout
        - uses: actions/checkout@v4

        # Cache
        - uses: actions/cache@v3
          with:
            path: Library
            key: Library-${{ vars.PROJECT_NAME }}-WebGL
            restore-keys: |
              Library-${{ vars.PROJECT_NAME }}-
              Library-

        # Show Diff
        - name: Show git diff
          run: git diff
          
        # Builder (WebGL)
        - uses: game-ci/unity-builder@v4
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            targetPlatform: WebGL
            buildName: WebGL
            buildsPath: Deploy

        # Adjust permissions for Deploy directory
        - name: Fix Deploy Directory Permissions
          run: |
            sudo chmod -R 777 Deploy
            sudo mkdir -p /home/runner/work/QRGenerator/QRGenerator/Deploy
            sudo chmod -R 777 /home/runner/work/QRGenerator/QRGenerator/Deploy

        # Move the build output to the desired path
        - name: Adjust build output path
          run: |
            rsync -a --no-t Deploy/WebGL/WebGL/ Deploy/
            rm -r Deploy/WebGL/WebGL

        # Show current dir
        - name: Show current directory
          run: pwd

        # List all contents
        - name: List contents
          run: ls -R
          
        # Storing Build
        - uses: actions/upload-artifact@v4
          with:
            name: WebGL-Build
            path: Deploy

        - name: List build directory
          run: ls -R Deploy

    auto-tag:
        name: Auto Tag
        runs-on: ubuntu-latest
        needs: build

        steps:
            # Checkout
            - uses: actions/checkout@v4

            # Auto tag
            - name: Bump version and push tag
              id: tag_version
              uses: mathieudutour/github-tag-action@v6.2
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                default_bump: minor
                tag_prefix: v
        # Outputing the tag        
        outputs:
            new_tag: ${{ steps.tag_version.outputs.new_tag }}
            
    create-release:
        name: Releasing the build
        needs: auto-tag
        runs-on: ubuntu-latest

        steps:

            # Download build
            - uses: actions/download-artifact@v4
              with:
                name: WebGL-Build
                path: Deploy

            # Zip the downloaded build folder
            - name: Zip build folder
              run: |
                cd Deploy
                zip -r ../build.zip .
                cd ..

            # Github Release    
            - name: Create Github Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name:  ${{ needs.auto-tag.outputs.new_tag }}
                release_name: Release ${{ needs.auto-tag.outputs.new_tag }}
                draft: false
                prerelease: false
                
            # Upload release build
            - name: Upload release asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./build.zip
                asset_name: WebGL.zip
                asset_content_type: application/zip
            
    deploy-pages:
        name: Deploy to Github Pages
        runs-on: ubuntu-latest
        needs: auto-tag

        steps:
            # Checkout
            - uses: actions/checkout@v4

            # Download build
            - uses: actions/download-artifact@v4
              with:
                name: WebGL-Build
                path: Deploy

            # Checkout gh pages branch
            - name: Checkout gh-pages branch
              uses: peaceiris/actions-gh-pages@v3
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                publish_branch: gh-pages
                publish_dir: Deploy
                
    deploy-itch:
        name: Deploy to Itch.io
        runs-on: ubuntu-latest
        needs: auto-tag

        steps:
          # Checkout
          - uses: actions/checkout@v4

         # Download build
          - uses: actions/download-artifact@v4
            with:
              name: WebGL-Build
              path: Deploy
        
          # Install butler
          - name: Download latest Butler release
            run: |
              wget https://broth.itch.zone/butler/linux-amd64/15.24.0/archive/default -O butler.zip
              mkdir -p butler-dir
              unzip butler.zip -d butler-dir
              chmod +x butler-dir/butler
              sudo mv butler-dir/butler /usr/local/bin/butler

              sudo mv butler-dir/7z.so /usr/local/lib/
              sudo mv butler-dir/libc7zip.so /usr/local/lib/
              
              sudo ldconfig

          # Login
          - name: Authenticate butler
            run: |
              butler login
            env:
              BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}

          # Push html5
          - name: Push WebGL build to Itch.io
            run: |
              butler push Deploy hsari/qr-generator:html5 --userversion ${{ needs.auto-tag.outputs.new_tag }}
            env:
              BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
